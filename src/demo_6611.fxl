# Create the executable code for a raylib graphics program and run it.
\cx=(value; std; use "lib/demo.fxl")
value; cx; \;

\DrawText==
	(\text\posX\posY\fontSize\color\next
	say "push_text_area(&list_text_area,";
	indent
		(
		say [(quoteC text)", "posX", "posY", "fontSize", "color");"];
		end
		);
	next
	)

\DrawRectangle==
	(\posX\posY\width\height\color\next
	say "push_rectangle(&list_rectangle,";
	indent
		(
		say [posX", "posY", "width", "height", "color");"];
		end
		);
	next
	)

\DrawWireRectangle==
	(\posX\posY\width\height\color\color_wire\next
	say "push_rectangle_l(&list_rectangle_l,";
	indent
		(
		say [posX", "posY", "width", "height", "color", "color_wire");"];
		end
		);
	next
	)

\DrawPlane==
	(\centerPos\size\color\next
	say "push_plane(&list_plane,";
	indent
		(
		say [(Vector3 centerPos)","];
		say [(Vector2 size)","];
		say color;
		say ");";
		end
		);
	next
	)

\DrawCube==
	(\position\width\height\length\color\next
	say "push_cube(&list_cube,";
	indent
		(
		say [(Vector3 position)","];
		say [width", "height", "length", "color];
		say ");";
		end
		);
	next
	)

\DrawWireCube==
	(\position\width\height\length\color\color_wire\next
	say "push_cube_l(&list_cube_l,";
	indent
		(
		say [position", "width", "height", "length","];
		say [color", "color_wire];
		say ");";
		end
		);
	next
	)

run_demo
[
"die.o"
"file.o"
"format.o"
"output.o"
"memory.o"
"cube.o"
"cube_l.o"
"rectangle.o"
"rectangle_l.o"
"plane.o"
"text_area.o"
]
(
\screenWidth= "800"
\screenHeight="450"

\title=="raylib [core] example - 3d camera first person"
\fps=="60"
\background_color=="RAYWHITE"

say ["// "title];
say "// Copyright (c) 2015-2022 Ramon Santamaria (@raysan5)";
nl;
say "#include <raylib.h>";
say "#include <pthread.h> // POSIX style threads management";
nl;
say "#include <cube.h>";
say "#include <cube_l.h>";
nl;
say "#include <rectangle.h>";
say "#include <rectangle_l.h>";
nl;
say "#include <plane.h>";
say "#include <text_area.h>";
nl;
say "#include <memory.h>";
nl;
say ["int screenWidth = "screenWidth";"];
say ["int screenHeight = "screenHeight";"];

say ["const char *title = "(quoteC title) ";"];
nl;
say "Camera camera = { 0 };";
nl;
say "Color background_color;";
nl;
say "struct list_cube *list_cube;";
say "struct list_cube_l *list_cube_l;";
nl;
say "struct list_rectangle *list_rectangle;";
say "struct list_rectangle_l *list_rectangle_l;";
nl;
say "struct list_plane *list_plane;";
say "struct list_text_area *list_text_area;";
nl;
say "// LATER 20230205 Do this configuration in Fexl using code generation";
say "void configure_scene(void)";
scope
	(
	say "InitWindow(screenWidth, screenHeight, title);";
	nl;
	say "// Define the camera to look into our 3d world (position, target, up vector)";
	say "camera.position = (Vector3){ 4.0f, 2.0f, 4.0f };";
	say "camera.target = (Vector3){ 0.0f, 1.8f, 0.0f };";
	say "camera.up = (Vector3){ 0.0f, 1.0f, 0.0f };";
	say "camera.fovy = 60.0f;";
	say "camera.projection = CAMERA_PERSPECTIVE;";
	nl;
	say "// Set a first person camera mode";
	say "SetCameraMode(camera, CAMERA_FIRST_PERSON);";
	nl;
	say ["SetTargetFPS("fps"); // Set our game to run at 60 frames-per-second"];
	nl;
	say ["background_color = "background_color";"];
	nl;

	DrawText
		"First person camera default controls:"
		"20" "20" "10" "BLACK"
		;

	DrawText
		"- Move with keys: W, A, S, D"
		"40" "40" "10" "DARKGRAY";

	DrawText
		"- Mouse move to look around"
		"40" "60" "10" "DARKGRAY";

	nl;

	DrawWireRectangle "10" "10" "220" "70" (Fade "SKYBLUE" "0.5f") "BLUE";

	nl;
	say "if (0)";
	enclose
	(
	DrawRectangle "100" "80" "80" "80" "RED";
	end
	);
	nl;

	say "// Draw ground";
	DrawPlane ["0.0f" "0.0f" "0.0f"] ["32.0f" "32.0f"] "LIGHTGRAY";
	nl;

	say "// Draw a blue wall";
	DrawCube ["-16.0f" "2.5f" "0.0f"] "1.0f" "5.0f" "32.0f" "BLUE";
	nl;

	say "// Draw a green wall";
	DrawCube [ "16.0f" "2.5f" "0.0f" ] "1.0f" "5.0f" "32.0f" "LIME";
	nl;

	say "// Draw a yellow wall";
	DrawCube [ "0.0f" "2.5f" "16.0f" ] "32.0f" "5.0f" "1.0f" "GOLD";
	nl;

	enclose
	(
	say "// Generate some random columns.";
	say "for (int i = 0; i < 20; i++)";
	scope
		(
		say "float height = (float)GetRandomValue(1, 12);";
		nl;
		say "Vector3 position = (Vector3)";
		indent
			(
			say "{";
			say "(float)GetRandomValue(-15, 15),";
			say "height/2.0f,";
			say "(float)GetRandomValue(-15, 15)";
			say "};";
			end
			);
		nl;
		say "Color color = (Color)";
		indent
			(
			say "{";
			say "GetRandomValue(20, 255),";
			say "GetRandomValue(10, 55),";
			say "30, 255";
			say "};";
			end
			);
		nl;

		DrawWireCube "position" "2.0f" "height" "2.0f" "color" "MAROON";
		end
		);
	end
	);
	end
	);
nl;
say "void run_scene(void)";
scope
	(
	say "list_cube = 0;";
	say "list_cube_l = 0;";
	nl;
	say "list_rectangle = 0;";
	say "list_rectangle_l = 0;";
	nl;
	say "list_plane = 0;";
	say "list_text_area = 0;";
	nl;
	say "configure_scene();";
	nl;
	say ["while (!WindowShouldClose())"
		" // Detect window close button or ESC key"];
	scope
		(
		say "UpdateCamera(&camera);";
		say "BeginDrawing();";
		nl;
		say "ClearBackground(background_color);";
		nl;

		say "// Draw the 3D objects";
		enclose
		(
		say "BeginMode3D(camera);";
		nl;
		say "draw_list_cube(list_cube);";
		say "draw_list_cube_l(list_cube_l);";
		say "draw_list_plane(list_plane);";
		nl;
		say "EndMode3D();";
		end
		);
		nl;

		say "// Draw the 2D objects";
		enclose
		(
		say "draw_list_rectangle(list_rectangle);";
		say "draw_list_rectangle_l(list_rectangle_l);";
		say "draw_list_text_area(list_text_area);";
		end
		);
		nl;

		say "EndDrawing();";
		end
		);
	nl;
	say "free_list_cube(list_cube);";
	say "free_list_cube_l(list_cube_l);";
	nl;
	say "free_list_rectangle(list_rectangle);";
	say "free_list_rectangle_l(list_rectangle_l);";
	nl;
	say "free_list_plane(list_plane);";
	say "free_list_text_area(list_text_area);";
	nl;
	say "CloseWindow(); // Close window and OpenGL context";
	end
	);
nl;
say "int main(void)";
scope
	(
	say "run_scene();";
	say "end_memory();";
	say "return 0;";
	end
	);
end
)
