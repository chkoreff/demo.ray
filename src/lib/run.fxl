#
\cx_indent=(value; std; use "lib/indent.fxl")

# Context which defines formatted output routines.
\cx_gen=
	(
	# Basic output rendering with C enhancements.
	\cx_render=
		(
		\cx_C=(value; std; cx_indent; use "lib/C.fxl")
		\form
		std;
		cx_indent;
		cx_C;
		form
		)
	# Common raylib routines.
	\cx_8139=(value; cx_render; use "lib/raylib_8139.fxl")
	# Display raylib types and routine calls.
	\cx_raylib=(value; cx_render; cx_8139; use name_extension)

	\form
	cx_render;
	cx_8139;
	cx_raylib;
	form
	)

\cx_proc=(value; std; use "lib/proc.fxl")

value;
std;
cx_indent;
cx_proc;
def "local_objects" local_objects;
def "cx_gen" cx_gen;
\;

\raylib_objects=
[
"rcore.o"
"rglfw.o"
"rmodels.o"
"rshapes.o"
"libraylib.a"
]

# The root directory is one level above src.
\dir_root=
	(
	eq dir_local "." "..";
	dirname dir_local
	)

\dir_bin=(path_under dir_root "cache/bin")
\dir_src=(path_under dir_root "cache/src")
\dir_obj=(path_under dir_root "cache/obj")

# Generate a C source file.
\do_gen_C=
	(\\content\file_c
	create_parent_directory file_c
	\fh=(fopen file_c "w")
	(use_output_fh fh; content)
	fclose fh
	)

\\do_compile=
	(
	\options=
	[
	"-Wall" "-Werror" "-Wunused-parameter" "-Wdeclaration-after-statement"
	"-O3"
	"-I" "."
	"-I" dir_local
	]

	\file_c\file_o
	create_parent_directory file_o
	run_sh T ["gcc -c "(join " " options)" "file_c" -o "file_o]
	)

\do_link=
	(\objects\libs\file_e
	create_parent_directory file_e
	run_sh T ["gcc -s "(join " " objects)" -o "file_e" "(join " " libs)]
	)

# Find position of the last "." in name, if any.
\find_suffix=
	(\name
	\pos=(search name "." 0)
	is_void pos pos;

	(@\\loop\pos
	\pos=(+ pos 1)
	\next_pos=(search name "." pos)
	is_void next_pos pos;
	loop next_pos
	)
	pos
	)

# Extract the logical module from a script name.
\get_module=
	(\name
	\name=(basename name) # Doesn't matter how we got here.
	\pos=(find_suffix name)
	is_void pos name;
	slice name 0 (- pos 1)
	)

# Print the demo output to stdout.
\\put_demo=(use_output_fh stdout)

# Build or run a raylib application from the given C source code.  This uses
# the name of the currently running script to establish a place in the cache
# directory to build the code.
#
# LATER 20230203 Automatically download and compile raylib if not present.
\run_demo=
	(\\content

	\script_name=(default ""; argv 1)
	\module=(get_module script_name)

	\file_e=(path_under dir_bin module)
	\stale=(is_newer script_name file_e)

	if stale
	(
	trace_elapsed;

	\file_c=(path_under dir_src; . module ".c")
	\file_o=(path_under dir_obj; . module ".o")

	do_gen_C content file_c
	do_compile file_c file_o

	\objects=
		(
		\dir=(path_under dir_root "raylib/src")
		map (path_under dir) raylib_objects
		)

	\objects=
		(
		append objects;

		# LATER 20230210 Eliminate build script and do that in Fexl.
		run_sh T ["cd "dir_local" && ./build"]

		\dir=(path_under dir_root "obj")
		map (path_under dir) local_objects
		)

	do_link
		[file_o; objects]
		["-lm" "-ldl" "-lpthread"]
		file_e
	)

	run_sh F (path_under dir_bin module)
	)

\form
std;
cx_gen;
def "put_demo" put_demo;
def "run_demo" run_demo;
form
