# Display raylib types and routines.

# LATER 20230204 Define list_length in C.

# LATER 20230204 Might devise a way to propagate errors functionally.
# LATER 20230204 Could also check valid numbers.
\split_vec==
	(\vec\type\len
	not (is_list vec)
		(error ["ERROR: "type" is not a list"]);
	ne len (list_length vec)
		(error ["ERROR: "type" is not length "len": "(as_str vec)]);
	list_to_tuple vec
	)

\Vector3==
	(\vec
	split_vec vec "Vector3" 3 \x\y\z
	["(Vector3){ "x", "y", "z" }"]
	)

\Vector2==
	(\vec
	split_vec vec "Vector2" 2 \x\y
	["(Vector2){ "x", "y" }"]
	)

\DrawPlane==
	(\centerPos\size\color\next
	say "DrawPlane(";
	indent
		(
		say [(Vector3 centerPos)","];
		say [(Vector2 size)","];
		say color;
		say ");";
		end
		);
	nl;
	next
	)

\DrawCube==
	(\position\width\height\length\color\next
	say "DrawCube(";
	indent
		(
		say [(Vector3 position)","];
		say [width", "height", "length", "color];
		say ");";
		end
		);
	nl;
	next
	)

\DrawWireCube==
	(\position\width\height\length\color\color_wire\next
	say ["DrawCube("position", "width", "height", "length", "color");"];
	say ["DrawCubeWires("position", "width", "height", "length", "
		color_wire");"];
	next
	)

\DrawWireRectangle==
	(\posX\posY\width\height\color\color_wire\next
	say ["DrawRectangle( "posX", "posY", "width", "height", "color");"];
	say ["DrawRectangleLines( "posX", "posY", "width", "height", "
		color_wire");"];
	nl;
	next
	)

\Fade==
	(\color\alpha
	["Fade("color", "alpha")"]
	)

\DrawText==
	(\text\posX\posY\fontSize\color\next
	say ["DrawText("(quoteC text)", "posX", "posY", "fontSize", "color");"];
	next
	)

\form
def "split_vec" split_vec;
def "Vector3" Vector3;
def "Vector2" Vector2;
def "DrawPlane" DrawPlane;
def "DrawCube" DrawCube;
def "DrawWireCube" DrawWireCube;
def "DrawWireRectangle" DrawWireRectangle;
def "Fade" Fade;
def "DrawText" DrawText;
form
